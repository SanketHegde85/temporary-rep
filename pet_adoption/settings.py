"""
Django settings for pet_adoption project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y4v@0q#g3=c)*jngw^sk2(40des#j6a#@()qs=04850ftq*8!o'

# *****************************************************************
# SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '172.28.144.1', '127.0.0.1', '192.168.1.40', '10.112.210.191', '10.16.2.89']


# *************************************************************
# DEBUG = os.environ.get("DEBUG", "False").lower() == "true"

# ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS").split(" ")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'pet_adoption.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'frontend-dockerised/build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pet_adoption.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# DATABASES = {                        #local database
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": "pet_adoption_2",
#         "USER": "postgres",
#         "PASSWORD": "root",
#         "HOST": "localhost",
#         "PORT": "5432",
#     }
# }


DATABASES = {                     # DOCKERISED DATABASE
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get('DATABASE_NAME', 'pet_adoption'),
        "USER": os.environ.get('DATABASE_USER', 'postgres'),
        "PASSWORD": os.environ.get('DATABASE_PASSWORD', 'root'),
        "HOST": os.environ.get('DATABASE_HOST', '172.17.0.2'), 
        # "HOST": "172.17.0.2",
        "PORT": "5432",
    }
}

# ***********************************************************************

# DATABASES["default"] = dj_database_url.parse("postgres://pet_adoption_0m1b_user:04vUDHN7owcUpMgeyDHQlu9J2wNoMOrm@dpg-co2ggh821fec73asuhp0-a.singapore-postgres.render.com/pet_adoption_0m1b")

# *************************************************
# database_url = os.environ.get("DATABASE_URL")
# DATABASES["default"] = dj_database_url.parse(database_url)

# postgres://pet_adoption_0m1b_user:04vUDHN7owcUpMgeyDHQlu9J2wNoMOrm@dpg-co2ggh821fec73asuhp0-a.singapore-postgres.render.com/pet_adoption_0m1b

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend-dockerised/build/static')
]

# STATIC_ROOT = os.path.join(BASE_DIR, '/frontend-dockerised/build/static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




# ************************************************************************
# import time
# from django.db import OperationalError
# from django.db.utils import ConnectionHandler

# def wait_for_db(retries=10, delay=5):
#     """
#     Retry connecting to the database for a certain number of times with a delay.
#     """
#     db_conn = None
#     for _ in range(retries):
#         try:
#             db_conn = ConnectionHandler()["default"]
#             db_conn.ensure_connection()
#             break  # Connection successful, break out of the loop
#         except OperationalError:
#             print("Database connection failed. Retrying...")
#             time.sleep(delay)
#     return db_conn

# # Call wait_for_db function before accessing the database
# db_conn = wait_for_db()
